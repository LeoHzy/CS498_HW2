// replica vm

const express = require('express');
const mysql = require('mysql2');
const axios = require('axios');

const app = express();
const port = 80;

app.use(express.json());

const db = mysql.createConnection({
    host: '127.0.0.1', 
    user: 'root',
    password: '203512replica',
    database: 'cloudDB'
});

const OTHER_VM = 'http://34.66.252.39';

db.connect(err => {
    if (err) console.error('Database connection failed:', err);
    else console.log('Connected to Database.');
});

app.get('/greeting', (req, res) => {
    res.send('Hello World!');
});

app.post('/register', async (req, res) => {
    const { username } = req.body;
    if (!username) {
        return res.status(400).json({ error: 'Username is required' });
    }

    const query = 'INSERT INTO Users (username) VALUES (?)';

    db.query(query, [username], async (err) => {
        if (err) {
            console.error(`Database Error: ${err.code} - ${err.sqlMessage}`);
            if (err.code === 'ER_DUP_ENTRY') {
                return res.status(400).json({ error: `User '${username}' already exists.` });
            }
            return res.status(500).json({ error: `Database error: ${err.code} - ${err.sqlMessage}` });
        }

        console.log(`User '${username}' inserted successfully in local DB.`);

        try {
            await axios.post(`${OTHER_VM}/register-forwarded`, { username });
            console.log(`Successfully propagated '${username}' to other VM.`);
            res.json({ message: `User '${username}' registered successfully in both VMs!` });
        } catch (error) {
            console.error(`Propagation Error: ${error.message}`);
            res.status(500).json({ error: 'User registered locally but failed to propagate to other VM' });
        }
    });
});

app.post('/register-forwarded', (req, res) => {
    const { username } = req.body;
    if (!username) {
        return res.status(400).json({ error: 'Username is required' });
    }

    const query = 'INSERT INTO Users (username) VALUES (?)';

    db.query(query, [username], (err) => {
        if (err) {
            console.error(`Database Error: ${err.code} - ${err.sqlMessage}`);
            return res.status(500).json({ error: `Database error: ${err.code} - ${err.sqlMessage}` });
        }

        console.log(`User '${username}' inserted successfully from forwarded request.`);
        res.json({ message: `User '${username}' registered locally from other VM.` });
    });
});

app.get('/list', (req, res) => {
    const query = 'SELECT username FROM Users';
    db.query(query, (err, results) => {
        if (err) return res.status(500).json({ error: 'Database error' });

        const users = results.map(row => row.username);
        res.json({ users });
    });
});

app.post('/clear', async (req, res) => {
    const query = 'DELETE FROM Users';

    db.query(query, async (err) => {
        if (err) return res.status(500).json({ error: 'Database error' });

        console.log("All users deleted locally.");

        try {
            await axios.post(`${OTHER_VM}/clear-forwarded`);
            console.log("Successfully propagated user deletion to other VM.");
            res.json({ message: "All users deleted successfully in both VMs!" });
        } catch (error) {
            console.error(`Propagation Error: ${error.message}`);
            res.status(500).json({ error: "Users cleared locally but failed to propagate to other VM." });
        }
    });
});

app.post('/clear-forwarded', (req, res) => {
    const query = 'DELETE FROM Users';

    db.query(query, (err) => {
        if (err) return res.status(500).json({ error: 'Database error' });

        console.log("Users deleted from forwarded clear request.");
        res.json({ message: "Users deleted successfully from other VM request." });
    });
});

app.listen(port, '0.0.0.0', () => {
    console.log(`Server running on http://0.0.0.0:${port}`);
});

// primary vm
const express = require('express');
const mysql = require('mysql2');
const axios = require('axios');

const app = express();
const port = 80;

app.use(express.json());

const db = mysql.createConnection({
    host: '127.0.0.1',
    user: 'root',
    password: '203512',
    database: 'cloudDB'
});

const OTHER_VM = 'http://34.55.79.217'; 

db.connect(err => {
    if (err) {
        console.error('Database connection failed:', err);
        process.exit(1);
    }
    console.log('Connected to MySQL Database.');
});

//GET /greeting
app.get('/greeting', (req, res) => {
    res.send('Hello World!');
});

//POST /register
app.post('/register', async (req, res) => {
    const { username } = req.body;
    if (!username) {
        return res.status(400).json({ error: 'Username is required' });
    }

    const query = 'INSERT INTO Users (username) VALUES (?)';

    db.query(query, [username], async (err) => {
        if (err) {
            console.error(`Database Error: ${err.code} - ${err.sqlMessage}`);
            if (err.code === 'ER_DUP_ENTRY') {
                return res.status(400).json({ error: `User '${username}' already exists.` });
            }
            return res.status(500).json({ error: `Database error: ${err.code} - ${err.sqlMessage}` });
        }

        console.log(`User '${username}' inserted successfully in local DB.`);

        try {
            await axios.post(`${OTHER_VM}/register-forwarded`, { username });
            console.log(`Successfully propagated '${username}' to other VM.`);
            res.json({ message: `User '${username}' registered successfully in both VMs!` });
        } catch (error) {
            console.error(`Propagation Error: ${error.message}`);
            res.status(500).json({ error: 'User registered locally but failed to propagate to other VM' });
        }
    });
});

app.post('/register-forwarded', (req, res) => {
    const { username } = req.body;
    if (!username) {
        return res.status(400).json({ error: 'Username is required' });
    }

    const query = 'INSERT INTO Users (username) VALUES (?)';

    db.query(query, [username], (err) => {
        if (err) {
            console.error(`Database Error: ${err.code} - ${err.sqlMessage}`);
            return res.status(500).json({ error: `Database error: ${err.code} - ${err.sqlMessage}` });
        }

        console.log(`User '${username}' inserted successfully from forwarded request.`);
        res.json({ message: `User '${username}' registered locally from other VM.` });
    });
});

//GET /list
app.get('/list', (req, res) => {
    const query = 'SELECT username FROM Users';
    db.query(query, (err, results) => {
        if (err) {
            console.error('Error fetching users:', err);
            return res.status(500).json({ error: 'Database error' });
        }

        const users = results.map(row => row.username);
        res.json({ users });
    });
});

//POST /clar
app.post('/clear', async (req, res) => {
    const query = 'DELETE FROM Users';

    db.query(query, async (err) => {
        if (err) return res.status(500).json({ error: 'Database error' });

        console.log("All users deleted locally.");

        try {
            await axios.post(`${OTHER_VM}/clear-forwarded`);
            console.log("Successfully propagated user deletion to other VM.");
            res.json({ message: "All users deleted successfully in both VMs!" });
        } catch (error) {
            console.error(`Propagation Error: ${error.message}`);
            res.status(500).json({ error: "Users cleared locally but failed to propagate to other VM." });
        }
    });
});

app.post('/clear-forwarded', (req, res) => {
    const query = 'DELETE FROM Users';

    db.query(query, (err) => {
        if (err) return res.status(500).json({ error: 'Database error' });

        console.log("Users deleted from forwarded clear request.");
        res.json({ message: "Users deleted successfully from other VM request." });
    });
});

app.listen(port, '0.0.0.0', () => {
    console.log(`Server running on http://0.0.0.0:${port}`);
});
